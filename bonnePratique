BONNES PRATIQUES

--------------------------------------------
Pour les foreach
--------------------------------------------_

Il faut utiliser une variable pour la lisibilité :

foreach my $xxx (@t){
	$xxx
}

Pas bien :

foreach (@t){
        $_
}

--------------------------------------------
Pour les Fonctions
--------------------------------------------

Il faut mieux utiliser my ($a,$b,$c) = @_ plutot que 

$x = shift ou $_[0]

sub toto{
my ($a,$b,$c) = @_ ;
}



--------------------------------------------
Pour les tables de hash
--------------------------------------------
Pour supprimer une valeur :

	On utilise delete() pour supprimer entrée dans table de hash
	--> On n'utilise pas $hash{key} = undef

		delete($hash{$key})

Afficher une valeur dans une table de hash :
	$hash{$key}

Parcourir une table :

	foreach my $e (keys %h) {...}

Assigner un tableau à une hashtable :

	%h = @t << Possible . Attention : clé, valeur, clé, valeur etc...

Vérifier qu'une clé existe :
	if(exists($hash{$key})) { ... } 

Trier une table de hash par les clés : IMPOSSIBLE , uniquement à l'affichage
	foreach my $keys (sort keys %hashtable){ ... }
	
Trier une table de hash sur les valeurs :
	foreach my $month (sort { $jours{$a} <=> $jours{$b} }  keys %jours){
	
Ajouter un objet dans un une table de hash
	$hash{$key} = $value;

--------------------------------------------
Gestion des paramèters du programme
--------------------------------------------

my @param = @ARGV :  Parametre passé au programme

<ARGV> OU <>  : contient descripteur vers fichier en paramèter ou entrée standard

ARGV : contient fichier en cours de traitement par <>

------------------------------------------------
Fonction de traitement sur les tableau / liste
------------------------------------------------

grep .. 

sort ..

map ..

--------------------------------------------
Expression régulière
--------------------------------------------

Important : Glouton / Non glouton ! Rajouter un "?" après le quantificateur. Ex : *? à la place de * >> .*?

\bFred\b  match que Fred, pas alFred ni Frederic

-------------------------------------------
Référence
-------------------------------------------

Accéder au contenu d'un scalaire via référence : $$refscalar
	Prise de référence:	$refScalar = \$scalar
	Copie de scalar:	$scalar = $$refScalar

Accéder au contenu d'un tableau via référence : $refTab->[1]
	Prise de référence :	$refTable = \@table
	Copie de table : 	@tab = @$refTable 

Accéder au contenu d'une hashtable via référence : $refHashtable->{key}
	Prise de référence:  	$refHashTable = \%hasTable	
	Copie de hashTable :	%hasHashTable = %$refHashtable


Tableau multidimension :

	Nouveau tableau multidimensionel anonyme : $refTab = [1,2,[3,4,5]];
	Afficher contenu d'un tab de tab: print $refTab->[2]->[0]  donne "3"
	Récupérer le tab contenu dans un tab : @{refTab->[2]}

Hashtable multidimension :
	Nouvelle hashtable anonyme : $refHash = { Paul => 28, Julie => 20}
	Hastable multidimension anonyme : 
		$refHash { Paul => 28, A => {toto => 1, titi=>2 }}
	
	Acces au contenu du hashtable plus bas : 
		$refHash->{A}->{toto}  (print donne 1)
	Récupérer le hashTable contenu %{$refHash->A}

HashTab contenant tableau :
	$refHash -> {A} -> [1]


/!\ Tableau / Scalaire / Hash = désalloué uniquement lorsqu'il n'y a plus aucune référence qui pointe dessus. /!\
	

	
	





